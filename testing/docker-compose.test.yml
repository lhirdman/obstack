version: '3.8'

# Test environment Docker Compose configuration
# Extends the main docker-compose.yml with additional test services

services:
  # Extend existing services with test-specific configurations
  frontend:
    extends:
      file: ../docker-compose.yml
      service: frontend
    environment:
      - NODE_ENV=test
      - VITE_API_BASE_URL=http://backend:8000
    networks:
      - test-network

  backend:
    extends:
      file: ../docker-compose.yml
      service: backend
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=test
      - DATABASE_URL=postgresql://observastack:observastack@postgres:5432/observastack
      - TEST_DATABASE_URL=postgresql://test_user:test_password@test-results-db:5432/test_results
    networks:
      - test-network

  postgres:
    extends:
      file: ../docker-compose.yml
      service: postgres
    networks:
      - test-network

  # Test-specific services
  test-results-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=test_results
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    ports:
      - "5433:5432"
    volumes:
      - test_results_data:/var/lib/postgresql/data
    networks:
      - test-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d test_results"]
      interval: 10s
      timeout: 5s
      retries: 5

  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.test-runner
    environment:
      - TEST_DATABASE_URL=postgresql://test_user:test_password@test-results-db:5432/test_results
      - FRONTEND_URL=http://frontend:3000
      - BACKEND_URL=http://backend:8000
    volumes:
      - ../apps/frontend/tests:/app/frontend-tests
      - ../apps/backend/tests:/app/backend-tests
      - test_reports:/app/reports
    depends_on:
      test-results-db:
        condition: service_healthy
      frontend:
        condition: service_started
      backend:
        condition: service_started
    networks:
      - test-network
    profiles:
      - test-execution

  health-monitor:
    build:
      context: .
      dockerfile: Dockerfile.health-monitor
    environment:
      - SERVICES_TO_MONITOR=frontend:3000,backend:8000,postgres:5432,test-results-db:5432
      - CHECK_INTERVAL=30
      - HEALTH_DB_URL=postgresql://test_user:test_password@test-results-db:5432/test_results
    depends_on:
      test-results-db:
        condition: service_healthy
    networks:
      - test-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  test_results_data:
  test_reports:

networks:
  test-network:
    name: observastack-test-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16